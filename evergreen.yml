pre:
  - command: git.get_project
    params:
      directory: src

# NOTE: for a buildvariant to run on PR,
# it must have `Test` in the name.
buildvariants:
  # Run project unit and integration tests
  - name: Test
    display_name: Test
    patch_only: true # only run the task group for patch builds (PR commits)
    paths:
      - "packages/**"
      - "package*.json"
      - ".evg.yml"
    run_on:
      - ubuntu2204-small # other runner types can be found here - https://wiki.corp.mongodb.com/display/DBDEVPROD/Guidelines+around+Evergreen+distros
    tasks:
      - name: TestTaskGroup
  # Test Kubernetes CI config
  - name: TestKubeCi
    display_name: TestKubeCi
    patch_only: true # only run the task group for patch builds (PR commits)
    paths:
      - ".infra/**"
    run_on:
      - ubuntu2204-small # other runner types can be found here - https://wiki.corp.mongodb.com/display/DBDEVPROD/Guidelines+around+Evergreen+distros
    tasks:
      - name: TestKubeCiTaskGroup
    expansions:
      role_arn: arn:aws:iam::664315256653:role/ai-assistant-tf-project
  - name: Deploy
    display_name: Deploy
    paths:
      - "packages/**"
      - "package*.json"
      - "*.dockerfile"
      - ".evg.yml"
      - ".infra/**"
    run_on:
      - ubuntu2204-small # other runner types can be found here - https://wiki.corp.mongodb.com/display/DBDEVPROD/Guidelines+around+Evergreen+distros
    tasks:
      - name: DeployTaskGroup
    expansions:
      role_arn: arn:aws:iam::664315256653:role/ai-assistant-tf-project

tasks:
  - name: test-all
    exec_timeout_secs: 90000
    commands:
      - command: shell.exec
        params:
          working_dir: src
          shell: "bash"
          add_expansions_to_env: true
          script: |
            set -eou pipefail

            # Source nvm and use Node 20
            export NVM_DIR="/opt/nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              \. "$NVM_DIR/nvm.sh"  # This loads nvm
            else
              echo "ERROR: nvm not found at $NVM_DIR/nvm.sh"
              echo "Checking for nvm in other locations..."
              find /opt -name "nvm.sh" 2>/dev/null || true
              find /usr/local -name "nvm.sh" 2>/dev/null || true
              echo "Checking if node is already available..."
              which node || echo "Node not found in PATH"
              node --version || echo "Cannot get node version"
              exit 1
            fi

            nvm install 20
            nvm use 20
            echo "Current Node version: $(node --version)"
            echo "Current npm version: $(npm --version)"

            npm ci
            npm run build
            npm run test
          env:
            NODE_OPTIONS: "--max-old-space-size=4096"
            PORT: "3000"
            OPENAI_EMBEDDING_MODEL: text-embedding-ada-002
            OPENAI_EMBEDDING_MODEL_VERSION: "2023-05-15"
            MONGODB_DATABASE_NAME: docs-chatbot-test
            VECTOR_SEARCH_INDEX_NAME: vector_index
            OPENAI_CHAT_COMPLETION_MODEL_VERSION: 2023-06-01-preview
            OPENAI_PREPROCESSOR_CHAT_COMPLETION_DEPLOYMENT: gpt-4o-mini
            OPENAI_ANALYZER_CHAT_COMPLETION_DEPLOYMENT: gpt-4.1-mini
            OPENAI_API_VERSION: "2024-06-01"
            OPENAI_RESOURCE_NAME: "docs-ai-chatbot-useast2resource-sandbox"
            BRAINTRUST_TEXT_TO_DRIVER_PROJECT_NAME: "text-to-node-js-driver-benchmark"
            BRAINTRUST_ENDPOINT: "<placeholder>"
            OPENAI_ENDPOINT: https://docs-ai-chatbot-useast2resource-sandbox.openai.azure.com/
            OPENAI_VERIFIED_ANSWER_EMBEDDING_DEPLOYMENT: docs-chatbot-embedding-ada-002
            OPENAI_RETRIEVAL_EMBEDDING_DEPLOYMENT: text-embedding-3-small
            OPENAI_CHAT_COMPLETION_DEPLOYMENT: gpt-4.1
            JUDGE_EMBEDDING_MODEL: "text-embedding-3-small"
            JUDGE_LLM: "gpt-4o-mini"

  - name: lint-kube-ci
    exec_timeout_secs: 9000
    depends_on:
      - name: test-all
        status: success
    commands:
      - command: ec2.assume_role
        params:
          role_arn: ${role_arn}
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -eou pipefail

            sudo apt install amazon-ecr-credential-helper
            docker-credential-ecr-login -v

            mkdir -p /home/ubuntu/.docker/

            cat << EOF > /home/ubuntu/.docker/config.json
            {"credsStore": "ecr-login"}
            EOF
      - command: shell.exec
        display_name: kube-ci - lint + helm-diff
        params:
          add_expansions_to_env: true # needed to get the AWS secrets from ec2.assume_role
          shell: "bash"
          working_dir: src
          env:
            workspace: /src
          script: |
            set -euxo pipefail

            docker run --rm \
            -e KUBE_CI_SKIP_COMMENTS=true \
            -e CI=$CI \
            -e EVERGREEN_BRANCH_NAME="${branch_name}" \
            -e EVERGREEN_WORKSPACE="$workspace" \
            -v ${workdir}$workspace:$workspace \
            -w $workspace \
            --entrypoint "" \
            664315256653.dkr.ecr.us-east-1.amazonaws.com/sre/kube-ci-runner:15c24dd05a5ca11a6695e0fb09daec54c9e6b947 \
            sh -c "git config --global --add safe.directory '*' && bash -x /yellow/cmd/kube-ci-runner/kube-ci-runner"

  - name: build-push
    exec_timeout_secs: 9000
    depends_on:
      - name: lint-kube-ci
        status: success
      - name: test-all
        status: success
    commands:
      - command: ec2.assume_role
        params:
          role_arn: ${role_arn}
      # setup docker to be able to pull from xgen-cloud/docker-base-images and push to the SRE ECR.
      - command: shell.exec
        params:
          shell: "bash"
          script: |
            set -eou pipefail

            sudo apt install amazon-ecr-credential-helper
            docker-credential-ecr-login -v

            mkdir -p /home/ubuntu/.docker/

            cat << EOF > /home/ubuntu/.docker/config.json
            {"credsStore": "ecr-login"}
            EOF
        # https://docs.devprod.prod.corp.mongodb.com/evergreen/Project-Configuration/Project-Commands#shellexec
      - command: shell.exec
        display_name: Build + Push
        params:
          add_expansions_to_env: true # needed to get the AWS secrets from ec2.assume_role
          shell: "bash"
          working_dir: src
          script: |
            set -euxo pipefail

            ECR_BASE="664315256653.dkr.ecr.us-east-1.amazonaws.com/ai-assistant/chatbot-server-mongodb-public"
            IMAGE_TAG="$ECR_BASE:${github_commit}"

            docker build -f chat-server.dockerfile --build-arg "GIT_VERSION=${github_commit}" -t $IMAGE_TAG .

            if [ "${is_patch}" != "true" ]; then
              docker push $IMAGE_TAG
              echo "âœ… Pushed docker image $IMAGE_TAG"
            else
              echo "Skipping docker push for patch builds"
            fi
            echo ${github_commit} >> version

      - command: s3.put
        display_name: Trigger Dev Deploy
        params:
          role_arn: ${role_arn}
          local_file: src/version
          remote_file: chatbot-server-mongodb-public/dev
          bucket: version-pointers-ai-assistant
          region: us-east-1
          permissions: bucket-owner-read
          content_type: text
          patchable: false # only trigger deploys when its not a patch

task_groups:
  - name: TestTaskGroup
    setup_group_can_fail_task: true
    allowed_requesters:
      - github_pr
      - patch
      - ad_hoc
    setup_group:
      - command: git.get_project
        params:
          directory: src
    max_hosts: 1
    tasks:
      - test-all
  - name: TestKubeCiTaskGroup
    setup_group_can_fail_task: true
    allowed_requesters:
      - github_pr
      - patch
      - ad_hoc
    setup_group:
      - command: git.get_project
        params:
          directory: src
    max_hosts: 1
    tasks:
      - lint-kube-ci
  - name: DeployTaskGroup
    setup_group_can_fail_task: true
    allowed_requesters:
      - commit
    setup_group:
      - command: git.get_project
        params:
          directory: src
    max_hosts: 1
    tasks:
      - lint-kube-ci
      - test-all
      - build-push
